#import statements

''' For Ducumentation refer to Model Documentation.docx'''
import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator
import numpy as np
class cnn_text():
        def cnn(features,labels,epochvar):

                # Converting image or pickling it

                import os
                import numpy as np
                import cv2
                import matplotlib.pyplot as plt
                import pickle
                import random
                from sklearn.model_selection import train_test_split
                from sklearn.svm import SVC
                from sklearn import metrics
                X = np.load(features)
                Y = np.load(labels)
                print(X.shape)
                print(Y.shape)

                # from sklearn.model_selection import KFold

                # # Define the K-fold Cross Validator
                # kfold = KFold(n_splits=3, shuffle=True)

                # # K-fold Cross Validation model evaluation
                # fold_no = 1
                # for train, test in kfold.split(X, Y):
                # initialising sequential model and adding layers to it
                cnn = tf.keras.models.Sequential()
                cnn.add(tf.keras.layers.Conv2D(filters=20, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))
                cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
                cnn.add(tf.keras.layers.Conv2D(filters=20, kernel_size=3, activation='relu'))
                cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
                cnn.add(tf.keras.layers.Dropout(0.25))
                cnn.add(tf.keras.layers.Conv2D(filters=20, kernel_size=3, activation='relu'))
                cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
                cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))
                cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
                cnn.add(tf.keras.layers.Flatten())
                cnn.add(tf.keras.layers.Dense(128, activation='relu'))
                cnn.add(tf.keras.layers.Dropout(0.25))
                cnn.add(tf.keras.layers.Dense(64, activation='relu'))
                cnn.add(tf.keras.layers.Dense(32, activation='relu'))
                cnn.add(tf.keras.layers.Dense(16, activation='relu'))
                cnn.add(tf.keras.layers.Dense(8, activation='softmax'))

                # finally compile and train the cnn
                # For binary
                # cnn.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])
                # for multile classes
                cnn.summary
                # # Generate a print
                # print('------------------------------------------------------------------------')
                # print(f'Training for fold {fold_no} ...')

                cnn.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])
                cnn.fit(X, Y, epochs=int(epochvar), validation_split=0.20)
                # cnn.fit(x=train_generator, epochs=40)
                # Generate a print
                # print('------------------------------------------------------------------------')
                # print(f'Training for fold {fold_no} ...')

                # https://www.tensorflow.org/tutorials/audio/simple_audio
                test_imgs = []
                test_labels = []

                import matplotlib.pyplot as plt
                import seaborn as sns
                y_pred = np.argmax(cnn.predict(X), axis=1)
                y_true = Y

                test_imgs = X
                test_labels = Y

                print(y_pred)
                print(Y)
                # print("Confusion matrix for fold", fold_no)
                confusion_mtx = tf.math.confusion_matrix(y_true, y_pred)
                plt.figure(figsize=(10, 8))
                commands = ['GATAK', 'Kelihos_ver1','Kelihos_ver3','Lollipop','Obfuscator.ACY','Ramnit','Tracur','vundo']
                sns.heatmap(confusion_mtx, xticklabels=commands, yticklabels=commands,
                            annot=True, fmt='g')
                plt.xlabel('Prediction')
                plt.ylabel('Label')
                plt.show()
                # fold_no=fold_no+5

                model = cnn
                model.save("models/cnn_text.h5")
