#import statements
# import statements
import tensorflow as tf
# class name ImageDataGenerator
from keras.preprocessing.image import ImageDataGenerator
import numpy as np
from PIL import ImageFile
ImageFile.LOAD_TRUNCATED_IMAGES = True

class cnn():
        def cnn(datasetpath,validationpath,epochvar):
                # ***********************  CNN  ******************************
                # loading training data
                # class name ImageDataGenerator
                train_datagen = ImageDataGenerator(
                        horizontal_flip=False)
                train_generator = train_datagen.flow_from_directory(
                        datasetpath,
                        target_size=(64, 64),
                        batch_size=32,
                        shuffle='True',
                        class_mode='sparse')

                # loading testing data
                test_datagen = ImageDataGenerator()
                test_generator = train_datagen.flow_from_directory(
                        validationpath,
                        target_size=(64, 64),
                        batch_size=32,
                        shuffle='True',
                        class_mode='sparse')

                # initialising sequential model and adding layers to it
                cnn = tf.keras.models.Sequential()
                cnn.add(tf.keras.layers.Conv2D(filters=20, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))
                cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
                cnn.add(tf.keras.layers.Conv2D(filters=20, kernel_size=3, activation='relu'))
                cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
                cnn.add(tf.keras.layers.Dropout(0.25))
                cnn.add(tf.keras.layers.Conv2D(filters=20, kernel_size=3, activation='relu'))
                cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
                cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))
                cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
                cnn.add(tf.keras.layers.Flatten())
                cnn.add(tf.keras.layers.Dense(128, activation='relu'))
                cnn.add(tf.keras.layers.Dropout(0.25))
                cnn.add(tf.keras.layers.Dense(64, activation='relu'))
                cnn.add(tf.keras.layers.Dense(32, activation='relu'))
                cnn.add(tf.keras.layers.Dense(16, activation='relu'))
                cnn.add(tf.keras.layers.Dense(8, activation='softmax'))
                cnn.summary()
                # # finally compile and train the cnn
                # #For binary
                # # cnn.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])
                # #for multile classes
                cnn.compile(optimizer="Adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])
                cnn.fit(x=train_generator, validation_data=test_generator, epochs=int(epochvar))

                model = cnn
                model.save("models/CNN_images.h5")

                X = test_generator
                Y = test_generator.classes

                # print(Y)
                test_imgs = []
                test_labels = []

                import matplotlib.pyplot as plt
                import seaborn as sns
                y_pred = np.argmax(cnn.predict(X), axis=1)
                y_true = Y

                test_imgs = X
                test_labels = y_true

                print(y_pred)

                print(Y)
                # print("Confusion matrix for fold", fold_no)
                confusion_mtx = tf.math.confusion_matrix(y_true, y_pred)
                plt.figure(figsize=(10, 8))
                commands = ['GATAK', 'Kelihos_ver1','Kelihos_ver3','Lollipop','Obfuscator.ACY','Ramnit','Tracur','vundo']
                sns.heatmap(confusion_mtx, xticklabels=commands, yticklabels=commands,
                            annot=True, fmt='g')
                plt.xlabel('Prediction')
                plt.ylabel('Label')
                plt.show()