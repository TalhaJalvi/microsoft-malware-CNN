# Important Imports
from cnn_images import cnn
from cnn_text import cnn_text
import numpy as np
from sklearn.model_selection import train_test_split
from utils.data import load_data
from utils.data import one_hot_encode
from tkinter import PhotoImage, INSERT, END
import tkinter.font as tkFont
import tkinter.font as font

import tkinter as tk
from tkinter import *
from tkinter import filedialog, messagebox, ttk
import os
import tensorflow as tf
from keras.models import load_model
import cv2
import numpy as np


class GUIMAIN:
    folder_selected=''
    def gui(self):
        root = tk.Tk()
        root.title("Malware detection")
        canvas = tk.Canvas(root, height="500", width="600", bg="white", bd="4")
        canvas.pack()


        myFont = font.Font(family='Helvetica', size="9", weight="bold")
        myFont1 = font.Font(family='Helvetica', size="13", weight="bold")
        myFont2 = font.Font(family='Helvetica', size="15", weight="bold")

        label = tk.Label(canvas, anchor="n", text="Malware image Classifier", width="20", font=("bold", 20))
        label.place(x=170, y=23)

    #In this function we will get path of dataset folder
        def showtextdataset():
            self.folder_selected = filedialog.askopenfilename()
            print(self.folder_selected)
            brows_1.insert(10,self.folder_selected)

        my_tab = ttk.Notebook(canvas)
        my_tab.pack(pady="70")
        frame2 = tk.Frame(my_tab, width="700", height="1000", bg="gray")
        frame3 = tk.Frame(my_tab, width="700", height="1000", bg="gray")
        frame4 = tk.Frame(my_tab, width="700", height="1000", bg="gray")
        frame2.pack(fill="both", expand="0")
        frame3.pack(fill="both", expand="0")
        frame4.pack(fill="both", expand="0")
        bg1 =  PhotoImage(file = 'bg1.PNG')
        bg2 = PhotoImage(file = 'bg2.PNG')
        bg3= PhotoImage(file = 'bg3.PNG')


        my_tab.add(frame2, text="load TextFile")
        my_tab.add(frame4, text="Images to Numpy Array")
        my_tab.add(frame3, text="Analyze")





        def showtextdataset():
            #Getting dataset path
            datasetpath=  filename =filedialog.askopenfilename()
            print(datasetpath)
            brows_1.insert(10, datasetpath)

        label_img_2 = Label(frame2, image=bg2)
        label_img_2.place(x=0, y=0, relwidth=1, relheight=1)

        label_2_1 = tk.Label(frame2, width="20", text="Select Algorithm / model", bg="white")
        label_2_1['font'] = myFont1
        label_2_1.place(x=35, y=50)

        n = tk.StringVar()
        monthchoosen = ttk.Combobox(frame2, width=27,
                                textvariable=n)

        # Adding combobox drop down list
        monthchoosen['values'] = (
                              'cnn_text'
                              )


        monthchoosen.place(x="385", y="100")



        label_3 = tk.Label(frame2, width="50", text=" features.npy ", bg="white")
        label_3['font'] = myFont1
        label_3.place(x=35, y=180)


        brows_1 = tk.Entry(frame2, width="50", bd="4.5")
        brows_1.place(x="90", y="220")

        Button_3 = tk.Button(frame2, text="Browse", width="20", bd="3", command=showtextdataset)
        Button_3.place(x="420", y="220")
        Button_3['font'] = myFont

        label_3 = tk.Label(frame2, width="50", text="labels.npy ", bg="white")
        label_3['font'] = myFont1
        label_3.place(x=35, y=280)

        brows_2 = tk.Entry(frame2, width="50", bd="4.5")
        brows_2.place(x="90", y="315")
        def showtextlabels():
            # Getting dataset path
            labelspath = filedialog.askopenfilename()
            print(labelspath)
            brows_2.insert(10, labelspath)
            # Now Passing values to classifier.py file for further evaluation and calculation


        Button_3_2 = tk.Button(frame2, text="Browse", width="20", bd="3", command=showtextlabels)
        Button_3_2.place(x="420", y="315")
        Button_3_2['font'] = myFont
        def runclassifier_text():

            val = monthchoosen.get()
            if (val == 'cnn_text'):
                datasetpath = brows_1.get()
                print(datasetpath)
                labels = brows_2.get()
                epochvar = brows2_3.get()
                cnn_text.cnn(datasetpath,labels,epochvar)

        label_2_3 = tk.Label(frame2, width="20", text="Write Number of epochs", bg="white")
        label_2_3['font'] = myFont1
        label_2_3.place(x=90, y=400)

        brows2_3 = tk.Entry(frame2, width="10", bd="4.5")
        brows2_3.place(x="300", y="400")

        Button_4 = tk.Button(frame2, text="Run Classifier",height=2, width="30", bd="3",command=runclassifier_text)
        Button_4.place(x="210", y="470")
        Button_4['font'] = myFont


        def testimage():

            self.file_selected = filedialog.askopenfilename()
            model_selected = model_chooser.get()
            print(self.file_selected )

            if(model_selected=="cnn_text_trained"):

                from keras.models import load_model
                import cv2
                import numpy as np

                model = load_model('models/cnn_text.h5')
                model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])

                img = cv2.imread(self.file_selected )
                img = cv2.resize(img, (64, 64))

                img = np.reshape(img, [-1, 64, 64, 3])

                predictions = model.predict(img)
                print(predictions)

                # Generate arg maxes for predictions
                classes = np.argmax(predictions, axis=1)
                print(classes)
                predict=''
                if (classes == 0):
                    print("Gatak")
                    predict = 'Gatak'
                elif (classes == 1):
                    print("Kelihos_ver1")
                    predict = 'Kelihos_ver1'
                elif (classes == 2):
                    print("Kelihos_ver3")
                    predict = 'Kelihos_ver3'
                elif (classes == 3):
                    print("Lollipop")
                    predict = 'Lollipop'
                elif (classes == 4):
                    print("Obfuscator.ACV")
                    predict = 'Obfuscator.ACV'
                elif (classes == 5):
                    print("Ramnit")
                    predict = 'Ramnit'
                elif (classes == 6):
                    print("Tracur")
                    predict = 'Tracur'
                elif (classes == 7):
                    print("Vundo")
                    predict = 'Vundo'


                brows_3.delete("1.0",'end')
                brows_3.insert("1.0",predict)

            elif(model_selected=="cnn_images_trained"):

                from keras.models import load_model
                import cv2
                import numpy as np

                model = load_model('models/cnn_images.h5')
                model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])

                # img = cv2.imread('CNN.model/twist institution 14.jpg')
                img = cv2.imread(self.file_selected )
                img = cv2.resize(img, (64, 64))

                img = np.reshape(img, [-1, 64, 64, 3])

                predictions = model.predict(img)
                print(predictions)

                # Generate arg maxes for predictions
                classes = np.argmax(predictions, axis=1)
                print(classes)
                predict=''
                if (classes == 0):
                    print("Gatak")
                    predict = 'Gatak'
                elif (classes == 1):
                    print("Kelihos_ver1")
                    predict = 'Kelihos_ver1'
                elif (classes == 2):
                    print("Kelihos_ver3")
                    predict = 'Kelihos_ver3'
                elif (classes == 3):
                    print("Lollipop")
                    predict = 'Lollipop'
                elif (classes == 4):
                    print("Obfuscator.ACV")
                    predict = 'Obfuscator.ACV'
                elif (classes == 5):
                    print("Ramnit")
                    predict = 'Ramnit'
                elif (classes == 6):
                    print("Tracur")
                    predict = 'Tracur'
                elif (classes == 7):
                    print("Vundo")
                    predict = 'Vundo'
                brows_3.delete("1.0",'end')
                brows_3.insert("1.0",predict)

        label_img_3 = Label(frame3, image=bg3)
        label_img_3.place(x=0, y=0, relwidth=1, relheight=1)


        label_3_1 = tk.Label(frame3, width="20", text="Select model", bg="white")
        label_3_1['font'] = myFont1
        label_3_1.place(x=90, y=50)
        n = tk.StringVar()
        model_chooser = ttk.Combobox(frame3, width=33,
                                    textvariable=n)

        # Adding combobox drop down list
        model_chooser['values'] = (
                                  'cnn_text_trained'
                                  )

        # Shows february as a default value
        # monthchoosen.current(0)
        model_chooser.place(x="350", y="90")

        Button_6 = tk.Button(frame3, text="Analyze Image Data", width="30", bd="3",command=testimage)
        Button_6.place(x="355", y="230")
        Button_6['font'] = myFont



        brows_3 =tk.Text(frame3, height=7,width=40)
        brows_3.place(x="180",y="280")


        ###  CODE FOR FRAME 4
        label_img_4 = Label(frame4, image=bg1)
        label_img_4.place(x=0, y=0, relwidth=1, relheight=1)

        label_4 = tk.Label(frame4, width="40", text="Dataset path to be converted", bg="white")
        label_4['font'] = myFont1
        label_4.place(x=35, y=180)

        brows4 = tk.Entry(frame4, width="50", bd="4.5")
        brows4.place(x="90", y="220")

        def datasetimgtonumpy():
            self.folder_selected = filedialog.askdirectory()
            print(self.folder_selected)
            brows4.insert(10, self.folder_selected)

        Button_4 = tk.Button(frame4, text="Browse", width="20", bd="3", command=datasetimgtonumpy)
        Button_4.place(x="420", y="220")
        Button_4['font'] = myFont

        def convertion():
            path = brows4.get()
            from img_to_numpy import imgtonpz
            imgtonpz(path)


        Button_4_1 = tk.Button(frame4, text="Start convertion",height="2", width="30", bd="3", command=convertion)
        Button_4_1.place(x="210", y="470")
        Button_4_1['font'] = myFont




        ## LOADING OUR GUI
        root.mainloop()


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
   g=GUIMAIN()
   g.gui()
